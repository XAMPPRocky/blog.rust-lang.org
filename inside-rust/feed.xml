<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2020-07-01T08:37:32+00:00</updated>

    
    <entry>
        <title>Disk space and LTO improvements</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/06/29/lto-improvements.html" type="text/html" title="Disk space and LTO improvements" />
        <published>2020-06-29T00:00:00+00:00</published>
        <updated>2020-06-29T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/06/29/lto-improvements.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/06/29/lto-improvements.html">&lt;p&gt;Thanks to the work of &lt;a href=&quot;https://github.com/nnethercote&quot;&gt;Nicholas Nethercote&lt;/a&gt; and &lt;a href=&quot;https://github.com/alexcrichton/&quot;&gt;Alex Crichton&lt;/a&gt;, there have been some recent improvements that reduce the size of compiled libraries, and improves the compile-time performance, particularly when using LTO. This post dives into some of the details of what changed, and an estimation of the benefits.&lt;/p&gt;
&lt;p&gt;These changes have been added incrementally over the past three months, with the latest changes landing just a few days ago on the nightly channel. The bulk of the improvements will be found in the 1.46 stable release (available on 2020-08-27). It would be great for any projects that use LTO to test it out on the nightly channel (starting from the 2020-06-13 release) and report any issues that arise.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#background&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;
&lt;p&gt;When compiling a library, &lt;code&gt;rustc&lt;/code&gt; saves the output in an &lt;code&gt;rlib&lt;/code&gt; file which is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Ar_(Unix)&quot;&gt;archive file&lt;/a&gt;. This has historically contained the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object code, which is the result of code generation. This is used during regular linking.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://llvm.org/docs/BitCodeFormat.html&quot;&gt;LLVM bitcode&lt;/a&gt;, which is a binary representation of LLVM's intermediate representation. This can be used for &lt;a href=&quot;https://llvm.org/docs/LinkTimeOptimization.html&quot;&gt;Link Time Optimization&lt;/a&gt; (LTO).&lt;/li&gt;
&lt;li&gt;Rust-specific metadata, which covers &lt;a href=&quot;https://github.com/rust-lang/rust/blob/0b66a89735305ebac93894461559576495ab920e/src/librustc_metadata/rmeta/mod.rs#L172-L214&quot;&gt;a wide range of data&lt;/a&gt; about the crate.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LTO is an optimization technique that can perform whole-program analysis. It analyzes all of the bitcode from every library at once, and performs optimizations and code generation. &lt;code&gt;rustc&lt;/code&gt; supports several forms of LTO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fat LTO. This performs &amp;quot;full&amp;quot; LTO, which can take a long time to complete and may require a significant amount of memory.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html&quot;&gt;Thin LTO&lt;/a&gt;. This LTO variant supports much better parallelism than fat LTO. It can achieve similar performance improvements as fat LTO (sometimes even better!), while taking much less total time by taking advantage of more CPUs.&lt;/li&gt;
&lt;li&gt;Thin-local LTO. By default, &lt;code&gt;rustc&lt;/code&gt; will split a crate into multiple &amp;quot;codegen units&amp;quot; so that they can be processed in parallel by LLVM. But this prevents some optimizations as code is separated into different codegen units, and is handled independently. Thin-local LTO will perform thin LTO across the codegen units within a single crate, bringing back some optimizations that would otherwise be lost by the separation. This is &lt;code&gt;rustc&lt;/code&gt;'s default behavior if opt-level is greater than 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#what-has-changed&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-has-changed&quot;&gt;&lt;/a&gt;What has changed&lt;/h2&gt;
&lt;p&gt;Changes have been made to both &lt;code&gt;rustc&lt;/code&gt; and Cargo to control which libraries should include object code and which should include bitcode based on the project's &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/profiles.html&quot;&gt;profile&lt;/a&gt; LTO settings. If the project is not using LTO, then Cargo will instruct &lt;code&gt;rustc&lt;/code&gt; to not place bitcode in the rlib files, which should reduce the amount of disk space used. This may have a small improvement in performance since &lt;code&gt;rustc&lt;/code&gt; no longer needs to compress and write out the bitcode.&lt;/p&gt;
&lt;p&gt;If the project is using LTO, then Cargo will instruct &lt;code&gt;rustc&lt;/code&gt; to not place object code in the rlib files, avoiding the expensive code generation step. This should improve the build time when building from scratch, and reduce the amount of disk space used.&lt;/p&gt;
&lt;p&gt;Two &lt;code&gt;rustc&lt;/code&gt; flags are now available to control how the rlib is constructed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/nightly/rustc/codegen-options/#linker-plugin-lto&quot;&gt;&lt;code&gt;-C linker-plugin-lto&lt;/code&gt;&lt;/a&gt; causes &lt;code&gt;rustc&lt;/code&gt; to only place bitcode in the &lt;code&gt;.o&lt;/code&gt; files, and skips code generation. This flag was &lt;a href=&quot;https://github.com/rust-lang/rust/issues/49879&quot;&gt;originally added&lt;/a&gt; to support cross-language LTO. Cargo now uses this when the rlib is only intended for use with LTO.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/nightly/rustc/codegen-options/#embed-bitcode&quot;&gt;&lt;code&gt;-C embed-bitcode=no&lt;/code&gt;&lt;/a&gt; causes &lt;code&gt;rustc&lt;/code&gt; to avoid placing bitcode in the rlib altogether. Cargo uses this when LTO is not being used, which reduces some disk space usage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, the method in which bitcode is embedded in the rlib has changed. Previously, &lt;code&gt;rustc&lt;/code&gt; would place compressed bitcode as a &lt;code&gt;.bc.z&lt;/code&gt; file in the rlib archive. Now, the bitcode is placed as an uncompressed section within each &lt;code&gt;.o&lt;/code&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object file&lt;/a&gt; in the rlib archive. This can sometimes be a small performance benefit, because it avoids cost of compressing the bitcode, and sometimes can be slower due to needing to write more data to disk. This change helped simplify the implementation, and also matches the behavior of clang's &lt;code&gt;-fembed-bitcode&lt;/code&gt; option (typically used with Apple's iOS-based operating systems).&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#improvements&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;improvements&quot;&gt;&lt;/a&gt;Improvements&lt;/h2&gt;
&lt;p&gt;The following is a summary of improvements observed on a small number of real-world projects of small and medium size. Improvements of a project will depend heavily on the code, optimization settings, operating system, environment, and hardware. These were recorded with the 2020-06-21 nightly release on Linux with parallel job settings between 2 and 32.&lt;/p&gt;
&lt;p&gt;The performance wins for debug builds were anywhere from 0% to 4.7% faster. Larger binary crates tended to fare better than smaller library crates.&lt;/p&gt;
&lt;p&gt;LTO builds were recorded anywhere from 4% to 20% faster. Thin LTO fared consistently better than fat LTO.&lt;/p&gt;
&lt;p&gt;The number of parallel jobs also had a large impact on the amount of improvement. Lower parallel job counts saw substantially more benefit than higher ones. A project built with &lt;code&gt;-j2&lt;/code&gt; can be 20% faster, whereas the same project at &lt;code&gt;-j32&lt;/code&gt; would only be 1% faster. Presumably this is because the code-generation phase benefits from higher concurrency, so it was taking a relatively smaller total percentage of time.&lt;/p&gt;
&lt;p&gt;The overall target directory size is typically 20% to 30% smaller for debug builds. LTO builds did not see as much of an improvement, ranging from 11% to 19% smaller.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#more-details&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;more-details&quot;&gt;&lt;/a&gt;More details&lt;/h2&gt;
&lt;p&gt;Nicholas Nethercote wrote about the journey to implement these changes at &lt;a href=&quot;https://blog.mozilla.org/nnethercote/2020/04/24/how-to-speed-up-the-rust-compiler-in-2020/&quot;&gt;https://blog.mozilla.org/nnethercote/2020/04/24/how-to-speed-up-the-rust-compiler-in-2020/&lt;/a&gt;. It took several PRs across &lt;code&gt;rustc&lt;/code&gt; and Cargo to make this happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/66598&quot;&gt;#66598&lt;/a&gt; — The original approach, that was decided to be too simplistic.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/issues/66961&quot;&gt;#66961&lt;/a&gt; — The issue outlining the strategy that was employed.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/70289&quot;&gt;#70289&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/rust/pull/70297&quot;&gt;#70297&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/rust/pull/70345&quot;&gt;#70345&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/rust/pull/70384&quot;&gt;#70384&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/rust/pull/70644&quot;&gt;#70644&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/rust/pull/70729&quot;&gt;#70729&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/rust/pull/71374&quot;&gt;#71374&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/rust/pull/71716&quot;&gt;#71716&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/rust/pull/71754&quot;&gt;#71754&lt;/a&gt; — A series of refactorings to prepare for the new behavior and do some cleanup.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/71323&quot;&gt;#71323&lt;/a&gt; — Introduced a new flag to control whether or not bitcode is embedded.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/70458&quot;&gt;#70458&lt;/a&gt; &lt;a href=&quot;https://github.com/rust-lang/rust/pull/71528&quot;&gt;#71528&lt;/a&gt; — Switched how LLVM bitcode is embedded.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/cargo/pull/8066&quot;&gt;#8066&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/cargo/pull/8192&quot;&gt;#8192&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/cargo/pull/8204&quot;&gt;#8204&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/cargo/pull/8226&quot;&gt;#8226&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/cargo/pull/8254&quot;&gt;#8254&lt;/a&gt;
&lt;a href=&quot;https://github.com/rust-lang/cargo/pull/8349&quot;&gt;#8349&lt;/a&gt; — The series of Cargo changes to implement the new functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#conclusion&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Although this is a conceptually simple change (LTO=bitcode, non-LTO=object code), it took quite a bit of preparation and work to make it happen. There were many edge cases and platform-specific behaviors to consider, and testing to perform. And, of course, the obligatory bike-shedding over the names of new command-line flags. This resulted in quite a substantial improvement in performance, particularly for LTO builds, and a huge improvement in disk space usage. Thanks to all of those that helped to make this happen!&lt;/p&gt;
</content>

        <author>
            <name>Eric Huss</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing the Windows and ARM notification groups</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/06/09/windows-notification-group.html" type="text/html" title="Announcing the Windows and ARM notification groups" />
        <published>2020-06-09T00:00:00+00:00</published>
        <updated>2020-06-09T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/06/09/windows-notification-group.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/06/09/windows-notification-group.html">&lt;p&gt;We are forming two new groups in the compiler team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Windows group, for helping us to diagnose and resolve Windows-related issues.&lt;/li&gt;
&lt;li&gt;An ARM group, for helping us to resolve issues specific to the ARM architectures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these groups are &amp;quot;notification groups&amp;quot;, which means that anyone can add their own name to the list -- if you do, you'll receive pings when Windows- or ARM-related bugs arise.&lt;/p&gt;
&lt;p&gt;Each group also has an associated Zulip stream ([&lt;code&gt;#t-compiler/windows&lt;/code&gt;], [&lt;code&gt;#t-compiler/arm&lt;/code&gt;]) where people can go to pose questions and discuss topics specific to that target.&lt;/p&gt;
&lt;p&gt;To get a better idea for what the groups will do, here are some examples of the kinds of questions where we would have reached out to the Windows group for advice in determining the best course of action:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should we remove the legacy InnoSetup GUI installer? &lt;a href=&quot;https://github.com/rust-lang/rust/pull/72569&quot;&gt;#72569&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What names should we use for static libraries on Windows? &lt;a href=&quot;https://github.com/rust-lang/rust/pull/29520&quot;&gt;#29520&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, if you are interested in participating, please sign up for the Windows or aarch64 groups! To do so, you open a PR against the &lt;a href=&quot;https://github.com/rust-lang/team&quot;&gt;rust-lang/team&lt;/a&gt; repository. Just follow these examples (but change the username to your own):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/team/pull/348&quot;&gt;Windows example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/team/pull/358&quot;&gt;ARM example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Upcoming compiler-team design meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/06/08/upcoming-compiler-team-design-meeting.html" type="text/html" title="Upcoming compiler-team design meetings" />
        <published>2020-06-08T00:00:00+00:00</published>
        <updated>2020-06-08T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/06/08/upcoming-compiler-team-design-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/06/08/upcoming-compiler-team-design-meeting.html">&lt;p&gt;In our &lt;a href=&quot;https://zulip-archive.rust-lang.org/238009tcompilermeetings/16428planningmeeting20200605.html&quot;&gt;planning meeting today&lt;/a&gt;, the &lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt; has scheduled our
next batch of upcoming design meetings. You can find the exact times
on the compiler team's &lt;a href=&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;meeting calendar&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On June 19th (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NGhzYXBkZm12ZzVmbzEzb2VpMzlsYzN0dnEgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will
have a follow-up discussion of our internal survey results.
See &lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/302&quot;&gt;rust-lang/compiler-team#302&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;On June 26th (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NmVjcTNibm03Ym5jamc2Z2NnaGNzaHFtMHYgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss
restructuring our current team organization
to reflect &amp;quot;areas of the compiler&amp;quot;.
See &lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/288&quot;&gt;rust-lang/compiler-team#288&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#did-you-know&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;did-you-know&quot;&gt;&lt;/a&gt;Did you know?&lt;/h3&gt;
&lt;p&gt;Most weeks, the compiler team has some sort of design meeting. These
meetings take place on Zulip and are open to all. Every 4 weeks, we do
a planning meeting to pick the next few meetings from the list of open
proposals. You can find &lt;a href=&quot;https://rust-lang.github.io/compiler-team/about/steering-meeting/&quot;&gt;more details about how the compiler-team
steering meeting process here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Felix Klock</name>
        </author>
    </entry>
    
    <entry>
        <title>New inline assembly syntax available in nightly</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/06/08/new-inline-asm.html" type="text/html" title="New inline assembly syntax available in nightly" />
        <published>2020-06-08T00:00:00+00:00</published>
        <updated>2020-06-08T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/06/08/new-inline-asm.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/06/08/new-inline-asm.html">&lt;p&gt;In the course of optimization, OS or embedded development, or other kinds of
low-level programming, you may sometimes need to write native assembly code for
the processor you're running on. &amp;quot;Inline assembly&amp;quot; provides a simple way to
integrate some assembly instructions into a Rust program, feeding Rust
expressions in as input registers, and getting output directly into Rust
variables. We've introduced a new syntax for inline assembly in nightly Rust,
and we're seeking feedback on it; we believe this new syntax has a path to
stabilization in the future.&lt;/p&gt;
&lt;p&gt;Nightly Rust has had a syntax for &amp;quot;inline assembly&amp;quot; (&lt;code&gt;asm!&lt;/code&gt;) for a long time;
however, this syntax just exposed a very raw version of LLVM's assembly
construct, with no safeguards to help developers use it. Getting any detail of
this syntax even slightly wrong tended to produce an Internal Compiler Error
(ICE) rather than the kind of friendly error message you've come to expect from
rustc. This syntax was also error-prone for another reason: it looks similar to
GCC's inline assembly syntax, but has subtle differences (such as the names in
register constraints). This syntax also had little to no hope of being
supported on any non-LLVM backend. As a result of all these limitations, the
&lt;code&gt;asm!&lt;/code&gt; syntax was highly unlikely to ever graduate from nightly to stable Rust,
despite being one of the most requested features.&lt;/p&gt;
&lt;p&gt;In an effort to improve &lt;code&gt;asm!&lt;/code&gt; and bring it to more users, &lt;a href=&quot;https://github.com/Amanieu&quot;&gt;Amanieu
d'Antras&lt;/a&gt; designed and implemented a new,
friendlier syntax for &lt;code&gt;asm!&lt;/code&gt;. This syntax has had a long road from concept to
compiler implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The proposal first started as a &lt;a href=&quot;https://internals.rust-lang.org/t/pre-rfc-2-inline-assembly/11310&quot;&gt;pre-RFC on
internals&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Inline assembly became one of the language team's first &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/2836-project-asm.md&quot;&gt;project
groups&lt;/a&gt;,
and iteratively designed RFCs in &lt;a href=&quot;https://github.com/rust-lang/project-inline-asm/&quot;&gt;the project group
repository&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2873&quot;&gt;RFC 2873&lt;/a&gt; (still under
discussion) provides a specification for the syntax and its interaction with
the Rust language.&lt;/li&gt;
&lt;li&gt;We &lt;a href=&quot;https://github.com/rust-lang/rust/pull/68404&quot;&gt;renamed the existing &lt;code&gt;asm!&lt;/code&gt; to
&lt;code&gt;llvm_asm!&lt;/code&gt;&lt;/a&gt;, so that people
currently using inline assembly on nightly can continue to use the existing
syntax for now. (We plan to remove this syntax eventually, given its fragile
ICE-happy nature, but while evaluating the new syntax we want the old syntax
available for comparison and alternatives.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/69171&quot;&gt;PR 69171&lt;/a&gt; (also by Amanieu)
implemented the new &lt;code&gt;asm!&lt;/code&gt; syntax in nightly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's an example of using the new inline assembly syntax, to print a message
to standard output using a direct &lt;a href=&quot;https://man7.org/linux/man-pages/man2/write.2.html&quot;&gt;&lt;code&gt;write&lt;/code&gt;
syscall&lt;/a&gt; on x86-64 Linux:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;#![feature(asm)]

fn main() {
    let buf = &amp;quot;Hello from asm!\n&amp;quot;;
    let ret: i32;
    unsafe {
        asm!(
            &amp;quot;syscall&amp;quot;,
            in(&amp;quot;rax&amp;quot;) 1, // syscall number
            in(&amp;quot;rdi&amp;quot;) 1, // fd (stdout)
            in(&amp;quot;rsi&amp;quot;) buf.as_ptr(),
            in(&amp;quot;rdx&amp;quot;) buf.len(),
            out(&amp;quot;rcx&amp;quot;) _, // clobbered by syscalls
            out(&amp;quot;r11&amp;quot;) _, // clobbered by syscalls
            lateout(&amp;quot;rax&amp;quot;) ret,
        );
    }
    println!(&amp;quot;write returned: {}&amp;quot;, ret);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(You can &lt;a href=&quot;https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=e983a5f5cffa51f4320f1176465d3a56&quot;&gt;try this example on the
playground&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The example above specifies the exact inputs, outputs, and clobbers required by
the Linux syscall calling convention. You can also provide inputs and outputs
via arbitrary registers, and the compiler will select appropriate registers for
you. The following example uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets&quot;&gt;bit manipulation
instructions&lt;/a&gt;
to compute the bit numbers of all set bits in a value, and stores them in a
slice of memory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;#![feature(asm)]

fn main() {
    let mut bits = [0u8; 64];
    for value in 0..=1024u64 {
        let popcnt;
        unsafe {
            asm!(
                &amp;quot;popcnt {popcnt}, {v}&amp;quot;,
                &amp;quot;2:&amp;quot;,
                &amp;quot;blsi rax, {v}&amp;quot;,
                &amp;quot;jz 1f&amp;quot;,
                &amp;quot;xor {v}, rax&amp;quot;,
                &amp;quot;tzcnt rax, rax&amp;quot;,
                &amp;quot;stosb&amp;quot;,
                &amp;quot;jmp 2b&amp;quot;,
                &amp;quot;1:&amp;quot;,
                v = inout(reg) value =&amp;gt; _,
                popcnt = out(reg) popcnt,
                out(&amp;quot;rax&amp;quot;) _, // scratch
                inout(&amp;quot;rdi&amp;quot;) bits.as_mut_ptr() =&amp;gt; _,
            );
        }
        println!(&amp;quot;bits of {}: {:?}&amp;quot;, value, &amp;amp;bits[0..popcnt]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(You can &lt;a href=&quot;https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=894a407f0fe858559aa378edf6ec4801&quot;&gt;try this example on the
playground&lt;/a&gt;.
Note that this code serves to demonstrate inline assembly, not to demonstrate
an efficient implementation of any particular algorithm.)&lt;/p&gt;
&lt;p&gt;Notice that &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;popcnt&lt;/code&gt; have registers selected for them, while
&lt;code&gt;bits.as_mut_ptr()&lt;/code&gt; must go in the &lt;code&gt;rdi&lt;/code&gt; register for use with the &lt;code&gt;stosb&lt;/code&gt;
instruction.&lt;/p&gt;
&lt;p&gt;Also, note that on x86 platforms, &lt;code&gt;asm!&lt;/code&gt; uses Intel syntax by default; however,
you can use AT&amp;amp;T syntax with &lt;code&gt;option(att_syntax)&lt;/code&gt;. You may find this useful
when translating existing inline assembly code to the new &lt;code&gt;asm!&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;For full details on the new &lt;code&gt;asm!&lt;/code&gt; syntax, see &lt;a href=&quot;https://github.com/Amanieu/rfcs/blob/inline-asm/text/0000-inline-asm.md&quot;&gt;RFC
2873&lt;/a&gt;.
Please try it out (including translating existing inline assembly to the new
syntax), and &lt;a href=&quot;https://github.com/rust-lang/rust/issues/&quot;&gt;report any bugs via the rust issue
tracker&lt;/a&gt; with the tag &lt;code&gt;F-asm&lt;/code&gt;. You
can also discuss inline assembly by creating a topic on &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/216763-project-inline-asm&quot;&gt;the project-inline-asm
stream in
Zulip&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Josh Triplett</name>
        </author>
    </entry>
    
    <entry>
        <title>2020 Contributor Survey</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/05/27/contributor-survey.html" type="text/html" title="2020 Contributor Survey" />
        <published>2020-05-27T00:00:00+00:00</published>
        <updated>2020-05-27T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/05/27/contributor-survey.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/05/27/contributor-survey.html">&lt;p&gt;You may be aware that &lt;a href=&quot;https://blog.rust-lang.org/2020/05/15/five-years-of-rust.html&quot;&gt;Rust recently turned 5&lt;/a&gt;! If you read this blog,
then you probably already know that the Rust project thrives because of its
many contributors, and that we're always looking for ways to make it easier for
people to get involved.&lt;/p&gt;
&lt;p&gt;Today we are pleased to announce the &lt;a href=&quot;https://forms.gle/G1jKM1ppGunft6j29&quot;&gt;Rust contributor survey&lt;/a&gt;. This
short, anonymous survey should only take a few minutes to fill out, but it will
really help us in understanding what kinds of problems people experience when
contributing to Rust so that we can try to address them. We value many
different kinds of contributions, such as reporting problems, triaging issues,
organizing meetups, etc, but this survey's purpose is to identify and eliminate
barriers to entry for code contributions.&lt;/p&gt;
&lt;p&gt;The survey is targeting current, past, and future contributors to Rust. We're
particularly interested in hearing from &lt;em&gt;new or prospective code contributors&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So whether you're a frequent contributor already or someone who has only
thought about contributing, please take a few minutes to &lt;a href=&quot;https://forms.gle/G1jKM1ppGunft6j29&quot;&gt;fill out the
survey&lt;/a&gt; before &lt;strong&gt;June 10, 2020&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We plan to share and discuss summary data. We may quote free-form responses
unless you ask us not to. All information is collected anonymously. Only team
members or people specifically helping administer the survey will be able to
view full results.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis and @mark-i-m</name>
        </author>
    </entry>
    
    <entry>
        <title>A retrospective on the 2018 rust-lang.org redesign</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html" type="text/html" title="A retrospective on the 2018 rust-lang.org redesign" />
        <published>2020-05-26T00:00:00+00:00</published>
        <updated>2020-05-26T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html">&lt;p&gt;We released our second 'edition' of Rust at the end of 2018. Part of that release was a revamp of the &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;Rust website&lt;/a&gt;. That work was completed on time, but there was some controversy when it was released, and the project itself was difficult and draining for those involved. This retrospective is an attempt to record the lessons learned from the project, and to put the project into context for those interested but not directly involved.&lt;/p&gt;
&lt;p&gt;This retrospective aims to be &lt;a href=&quot;https://blog.newrelic.com/technology/blameless-retrospectives/&quot;&gt;blameless&lt;/a&gt; and forward-looking. There is no benefit in re-litigating what happened, and we are interested here in the planning, project management, and community aspects, rather than critiquing the design or implementation.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#lessons-learned&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;lessons-learned&quot;&gt;&lt;/a&gt;Lessons learned&lt;/h2&gt;
&lt;p&gt;What have we learned for the next time we take on a similar project?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;People first: people are more valuable than schedules; keeping people healthy, happy, and productive is the most important aspect of managing a project.&lt;/li&gt;
&lt;li&gt;Open communication: we should be as open as possible as early as possible with communication about projects, even when the nature of the project means we can't be open with all development.&lt;/li&gt;
&lt;li&gt;Get feedback early and set expectations about the kind of feedback which is useful. We have ongoing problems in the Rust community where (mostly) well-intentioned feedback from the community becomes overwhelming to the point of harassment; we do not have a solution to this.&lt;/li&gt;
&lt;li&gt;Be prepared to manage feedback, in particular by having enough people available to respond.&lt;/li&gt;
&lt;li&gt;Recognize the complexity of projects and ensure appropriate project management.&lt;/li&gt;
&lt;li&gt;Projects should have clear ownership.&lt;/li&gt;
&lt;li&gt;Large projects should not be scheduled to finish at the same time.&lt;/li&gt;
&lt;li&gt;Work iteratively, rather than going for 'big bang' releases.&lt;/li&gt;
&lt;li&gt;Consider ongoing maintenance: how much is there to do? Who will do it? Failing to consider this means there is more pressure on the initial release.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of these points seem obvious with hindsight. However, every decision is a trade-off, and despite best intentions, it is easy to mis-weight factors in these trade-offs. The above are factors that, with hindsight, should have had more weight.&lt;/p&gt;
&lt;p&gt;In the next sections, I'll expand on some lessons from the summary and then give some context by describing the project.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#communication&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;communication&quot;&gt;&lt;/a&gt;Communication&lt;/h3&gt;
&lt;p&gt;Projects which have a primary focus on design have different dynamics to most other software projects. For example, there is the risk of 'design by committee'. When trying to do open development, this risk is magnified since the 'committee' is effectively the entire world. However, in retrospect we overshot and were not open enough with the website project.&lt;/p&gt;
&lt;p&gt;We could have better communicated the motivation and constraints of the project. By the time of the beta release, the community did not share the project team's conceptualization of the website's requirements. In the future, we might create a pre-RFC to discuss and communicate requirements without starting design work. Once a high-level design is made, it should be actively evangelized to the community.&lt;/p&gt;
&lt;p&gt;As well as asking for feedback (see below), we should communicate project progress and share opportunities for contribution. When looking back at a repository on GitHub, it is not obvious how much iteration has taken place, or what issues have been discussed. But, if the repository is followed from the start, these things are clear.&lt;/p&gt;
&lt;p&gt;In general, communication should be a conversation. Unfortunately, due to other ongoing projects, we did not have enough people with enough time to have that conversation. We think an important lesson here is not to schedule large projects concurrently.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#project-management&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;project-management&quot;&gt;&lt;/a&gt;Project management&lt;/h3&gt;
&lt;p&gt;We underestimated the scale of the project, both in terms of the work to be done and the number of people who would need to be coordinated. As a result, several good people were burnt-out by the project. Errors in software estimation are common; we should have reacted by putting people first - no project is worth losing good people for. One reason that did not happen is that nobody felt empowered to step back and re-evaluate the project. In general, ownership of the project was unclear and this led to poor leadership. Furthermore, the ownership which did exist was not communicated well to the wider community.&lt;/p&gt;
&lt;p&gt;The project as a whole highlighted not just our relative inexperience (with this kind of project), but also our process debt. We had not (and to a great extent still have not) created processes and structures to support projects and people when things start to go wrong. This lets small issues snowball into large ones. For the website project this was compounded by not having enough people involved - they became over-worked and stressed, and that meant they did not have the bandwidth to implement good project management, even when we knew the right thing to do.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#feedback&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;feedback&quot;&gt;&lt;/a&gt;Feedback&lt;/h3&gt;
&lt;p&gt;As mentioned earlier, we think that community feedback would have been easier to manage if it had been collected during the whole project, rather than being compressed into the final two weeks. Beyond that, we needed much better staffing for the feedback period. Handling feedback was an extremely stressful and difficult experience. In the future, we should ensure there are more people and that we structure feedback as much as possible to ensure that it is useful rather than overwhelming.&lt;/p&gt;
&lt;p&gt;A minority of the community went beyond what was acceptable as feedback. Coupled with the 'pile on' effect of discussions on the internet, this became harassment of the website developers. This is unacceptable behavior, and we expect better from the community. Some of the effect was unintentional, and this is a problem that affects controversial RFC discussions too. It is not clear how to solve this, but is something we should investigate.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#context&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;context&quot;&gt;&lt;/a&gt;Context&lt;/h2&gt;
&lt;p&gt;The website revamp was part of the 2018 edition. The edition was an awesome achievement, but an incredible amount of work. The new website was planned from near the beginning of the year, in the early stages of edition planning. We considered it important for the new website to be ready in time for the edition for maximum impact and because the previous website was unfit for our goals (more below). Because of the timing, there were fewer people available to work on the website than might have been the case, there was less time and energy for leadership and oversight, and there were many competing projects for those involved.&lt;/p&gt;
&lt;p&gt;The previous website had been incrementally added to, but there had never been major work on either content or design (other than the initial release). Essentially, the website rewrite was a completely new project in a domain where we had no organizational experience (there were individuals who had experience in web development, but there had not been opportunity for that experience to become institutional knowledge).&lt;/p&gt;
&lt;p&gt;The initial website was well-suited to its purpose and audience: presenting a small research project to interested hackers. However, as the project and website have grown, the website became less and less appropriate.&lt;/p&gt;
&lt;p&gt;There was consensus among the core team that the old website needed replacing. Although many in the community have fond memories of it (after all, it was most people's very first contact with Rust), there were several ways in which the old website was objectively inadequate: it was difficult to find information, much of the content was out of date, pages were crowded and poorly organized, it was hard to update and to localize (which resulted in missing and out of date information), and it was missing many parts of the community and ecosystem (e.g., any mention of using Rust in embedded systems).&lt;/p&gt;
&lt;p&gt;Design-wise, the previous website was simple and tidy, but it had problems - it was hard to emphasize text, there was little contrast between sections (making it hard to read), and it lacked the vibrancy of Rust's ecosystem and community. It was designed for the audience which built it, and our ambitions for Rust, and the audience for the website, had since grown larger.&lt;/p&gt;
&lt;p&gt;One of the goals of the 2018 edition was to appeal to a wider audience. The website was a key tool for achieving that goal. However, it was clear the design and most of the content needed a complete overhaul.&lt;/p&gt;
&lt;p&gt;This sounded like a relatively standard website project to produce a relatively small website. However, in retrospect, the constraints were difficult - there is a lot of information that needed to be made accessible, without making the website overwhelming; we needed to serve newcomers with different backgrounds, as well as existing Rust users looking to find information; the previous 'small' website had grown large, and there was a lot of content to update or replace.&lt;/p&gt;
&lt;p&gt;Work was slow to start and progress was slow, in part due to staffing issues. Content was sought from the teams in mid-2018. We vastly underestimated the complexity of producing and collecting content. Content was slow to produce and slow to review; there were many unrecognized dependencies. We needed lots of iteration. Essentially, the website became a project with 50-ish people, but was managed as if it were a project with one or two people. We were building a website before most content was ready, which is a well-known web development anti-pattern.&lt;/p&gt;
&lt;p&gt;Despite this, and largely due to heroic efforts, the website was finished on time. All planned content was present and polished. We had a striking and vibrant new design, and an implementation that made the website much easier to keep up to date and to translate. Essential information was easy to find, and the website was accessible to a wider audience, in particular developers who knew nothing about Rust, engineering management, and a wider section of potential contributors.&lt;/p&gt;
&lt;p&gt;Unfortunately, it was only just in time. As well as meaning that the last phase of work was stressful and rushed, it meant we didn't have as much time as we should have had for testing and feedback: only two weeks to gather and address feedback on the beta release. Because of this and an earlier lack of communication, there was a flood of commentary, some of which was vocally negative and some which was trolling or harassment. The team did not have the resources or time to respond well.&lt;/p&gt;
&lt;p&gt;Of course, being a software project, there were some bugs (most of which were quickly resolved), and some missing features (notably, localization, which made the website a worse experience for many visitors who did not speak English natively).&lt;/p&gt;
&lt;p&gt;Post-release, content and design was polished, bugs were addressed, and we attempted to create a team to maintain the website. Unfortunately, some of the poor behavior from the community continued. Several people involved with the edition and specifically the website were left burnt out and left Rust or cut back work significantly.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#conclusion&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In summary, we regard the website as a successful (but imperfect) product, but delivered in a sub-optimal manner. A lot of the things that went wrong were fairly common project management issues. We believe the highest-level lesson to take away is that the Rust organization should improve its project and product management. (To be clear, we think this is an organizational issue, not a comment on any individuals' skills in the domain). Our usual development style is iterative and incremental; when working on larger, less incremental projects, we need to put in more resources, management, and coordination to ensure success. The project was under-staffed and, beyond the obvious problems, that meant that even when we knew the right thing to do, we did not have the people, time, or energy to do it.&lt;/p&gt;
&lt;p&gt;Finally, thank you to everyone who built the website and who helped with this retrospective.&lt;/p&gt;
</content>

        <author>
            <name>Nick Cameron</name>
        </author>
    </entry>
    
    <entry>
        <title>Traits working group 2020 sprint 2 summary</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/05/18/traits-sprint-2.html" type="text/html" title="Traits working group 2020 sprint 2 summary" />
        <published>2020-05-18T00:00:00+00:00</published>
        <updated>2020-05-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/05/18/traits-sprint-2.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/05/18/traits-sprint-2.html">&lt;p&gt;It's that time of year again: another traits working group sprint summary. And ohh boy, it was a busy sprint.&lt;/p&gt;
&lt;p&gt;If you're unfamiliar with the traits working group, we posted a short summary in the &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html&quot;&gt;sprint 1 post&lt;/a&gt;. In short, the overarching goal of the &lt;a href=&quot;https://rust-lang.github.io/wg-traits/&quot;&gt;traits working group&lt;/a&gt; is to create a performant, extensible, and clean implementation of Rust's trait system.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#2020-sprint-2&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2020-sprint-2&quot;&gt;&lt;/a&gt;2020 sprint 2&lt;/h2&gt;
&lt;p&gt;While the first sprint of the year somewhat lacked direction and we very much &amp;quot;figured it out while we went&amp;quot;, this sprint was much smoother. This was in part because of the tools and procedures that we settled into in sprint 1, such as the &lt;a href=&quot;https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html&quot;&gt;skill tree&lt;/a&gt; or a running &lt;a href=&quot;https://github.com/rust-lang/wg-traits/blob/master/sprints/2020-2.md&quot;&gt;sprint doc&lt;/a&gt; to track progress.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#credit-where-credit-is-due&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;credit-where-credit-is-due&quot;&gt;&lt;/a&gt;Credit where credit is due&lt;/h3&gt;
&lt;p&gt;We had tons of participation from many people, some new and some old. For that, a big thank you ❤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/detrumi&quot;&gt;Wilco Kusee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marmeladema&quot;&gt;Élie Roudninski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flodiebold&quot;&gt;Florian Diebold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jackh726&quot;&gt;Jack Huey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/crlf0710&quot;&gt;Charles Lew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nathanwhit&quot;&gt;Nathan Whitaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/adamrk&quot;&gt;Adam Bratschi-Kaye&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/super-tuple&quot;&gt;super-tuple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/daboross&quot;&gt;David Ross&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nolanderc&quot;&gt;Christofer Nolander&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Michael-F-Bryan&quot;&gt;Michael Bryan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MarkMcCaskey&quot;&gt;Mark McCaskey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tirr-c&quot;&gt;Wonwoo Choi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zaharidichev&quot;&gt;Zahari Dichev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Areredify&quot;&gt;Mikhail Babenko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Mcat12&quot;&gt;Mark Drobnak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's a lot!&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#rustc-integration-mvp&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;rustc-integration-mvp&quot;&gt;&lt;/a&gt;Rustc integration MVP&lt;/h3&gt;
&lt;p&gt;As was mentioned in the &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html&quot;&gt;sprint 1 post&lt;/a&gt;, the previous experimental integration of &lt;a href=&quot;https://github.com/rust-lang/chalk&quot;&gt;Chalk&lt;/a&gt; into rustc was removed earlier this year. That integration was old and not based on the current Chalk codebase. At the end of the last sprint, we began reintegration. The plan was/is to start with a &amp;quot;minimum viable product&amp;quot; (MVP) using the new Chalk framework (for those curious, the new integration uses the &lt;code&gt;chalk-solve&lt;/code&gt; crate rather than &lt;code&gt;chalk-engine&lt;/code&gt;). This MVP had a few goals and limitations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rustc types and goals are deeply and eagerly converted to Chalk types&lt;/li&gt;
&lt;li&gt;Lifetimes are sometimes ignored&lt;/li&gt;
&lt;li&gt;No constants and some missing types and traits&lt;/li&gt;
&lt;li&gt;Some hacks to make things work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that said, the &lt;a href=&quot;https://github.com/rust-lang/rust/pull/69406&quot;&gt;rustc integration PR&lt;/a&gt; has landed and the new experimental Chalk solver is available under the &lt;code&gt;-Z chalk&lt;/code&gt; flag. Just as a forewarning: don't use this (yet). It's still very early in its implementation and things &lt;em&gt;won't&lt;/em&gt; work more often than they &lt;em&gt;will&lt;/em&gt;. &lt;strong&gt;But&lt;/strong&gt; it is a start and it's only going to get better and more complete from here.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#const-in-chalk-planning&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;const-in-chalk-planning&quot;&gt;&lt;/a&gt;Const in Chalk planning&lt;/h3&gt;
&lt;p&gt;Before this sprint started we decided that we wanted to plan a design meeting for consts in Chalk. We had that meeting on April 7th. However, we didn't expect to start working on the implementation &lt;em&gt;this&lt;/em&gt; sprint. But alas, there is already a &lt;a href=&quot;https://github.com/rust-lang/chalk/pull/393&quot;&gt;PR open to implement consts in Chalk&lt;/a&gt;. This has been helpful to uncover some design decisions within Chalk. We expect that this might be landing fairly soon.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#moving-towards-a-shared-type-library-for-rustc-and-chalk&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;moving-towards-a-shared-type-library-for-rustc-and-chalk&quot;&gt;&lt;/a&gt;Moving towards a shared type library for rustc and Chalk&lt;/h3&gt;
&lt;p&gt;Currently, rustc and Chalk represent types in a slightly different manner. Also, Chalk is missing a few. In the current MVP implementation the conversion between rustc and Chalk types are &amp;quot;deep and eager&amp;quot;, which means we do a lot of work to use Chalk as a trait solver. The eventual goal is to make a shared type library. There was a compiler team meeting to mostly &amp;quot;green-light&amp;quot; this from the rustc side of things. Most of the work so far, though, has been on Chalk to adding missing builtin types and traits.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#basic-support-for-impl-trait-in-chalk&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;basic-support-for-impl-trait-in-chalk&quot;&gt;&lt;/a&gt;Basic support for &lt;code&gt;impl Trait&lt;/code&gt; in Chalk&lt;/h3&gt;
&lt;p&gt;We landed initial support for &lt;code&gt;impl Trait&lt;/code&gt; during this sprint. It doesn't yet support some features, such as generics. But there is an open PR to extend the functionality.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#progress-towards-removing-the-leak-check-in-rustc&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;progress-towards-removing-the-leak-check-in-rustc&quot;&gt;&lt;/a&gt;Progress towards removing the leak check in rustc&lt;/h3&gt;
&lt;p&gt;In the rustc trait solver, there is currently a special check done in regards to lifetimes called the &amp;quot;leak check&amp;quot;. Without going into the techinical details, there are some design flaws with this approach and it being there blocks features such lazy normalization (which is required for features such const generics and GATs). However, removing the leak check completely has some backward-compatiblity concerns. But &lt;a href=&quot;https://github.com/rust-lang/rust/pull/70950&quot;&gt;some progress&lt;/a&gt; was made.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#adding-a-recursive-solver-to-chalk&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;adding-a-recursive-solver-to-chalk&quot;&gt;&lt;/a&gt;Adding a recursive solver to Chalk&lt;/h3&gt;
&lt;p&gt;When Chalk was first written, it used a stateful recursive solver. It was then changed to use a prolog-solving approach called SLG. SLG uses a more stateless approach where answers to subgoals can be reused.&lt;/p&gt;
&lt;p&gt;While SLG is more complete, there are some design tradeoffs. One example in particular is related to how we handle associated types. It's completely possible that we can and will resolve these design problems in the future. In the meantime, however, we ressurected the old recursive solver. &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer&quot;&gt;Rust-analyzer&lt;/a&gt; has switched to using it and results have been positive.&lt;/p&gt;
&lt;p&gt;For now, we'll continue to work on resolving design problems with the SLG solver. Eventually, we expect that we'll evaluate the two and pick one to stick with.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#creating-reproducable-chalk-test-files&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;creating-reproducable-chalk-test-files&quot;&gt;&lt;/a&gt;Creating reproducable Chalk test files&lt;/h3&gt;
&lt;p&gt;Oftentimes we'll get a bug report where Chalk doesn't report the result one would expect. And as anyone who has maintained a piece of software knows, getting a minimal reproduction is difficult. What makes it even more difficult is that the goals and programs that Chalk understands are a &amp;quot;lowered&amp;quot; form of actual Rust code, which means not only do we have to make a minimal &lt;em&gt;Rust&lt;/em&gt; example, but also a minimal &lt;em&gt;Chalk&lt;/em&gt; example.&lt;/p&gt;
&lt;p&gt;In order to help make this process easier, we have started to make a logging shim for Chalk to generate programs that Chalk can run and reproduce the bug. Moreso, it should be able to be used seamlessly, regardless of the user of Chalk, whether it be rustc, rust-analyzer, or anything else.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#documentation-in-the-chalk-book&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;documentation-in-the-chalk-book&quot;&gt;&lt;/a&gt;Documentation in the Chalk book&lt;/h3&gt;
&lt;p&gt;We are committed to making the work that we do accessible to anyone interested, whether it be for those working on Chalk, on rustc, or just using Rust. As part of this effort, we previous started publishing a Chalk &lt;a href=&quot;http://rust-lang.github.io/chalk/book/&quot;&gt;book&lt;/a&gt;. During this sprint, we have added a little bit more documentation. Additionally, Chalk-related documentation that used to be in the &lt;a href=&quot;https://rustc-dev-guide.rust-lang.org/&quot;&gt;rustc-dev-guide&lt;/a&gt; has now been moved into the Chalk book.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#2020-sprint-3&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2020-sprint-3&quot;&gt;&lt;/a&gt;2020 sprint 3&lt;/h2&gt;
&lt;p&gt;We haven't yet decided our goals for the next sprint. We are going to be doing our sprint planning in our weekly meeting on Tuesday, the 19th at 4:00 PM EST on &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits&quot;&gt;zulip&lt;/a&gt;. We then plan to officially start the sprint the week after. If you're interested in helping out or joining the discussion, feel free to stop by!&lt;/p&gt;
</content>

        <author>
            <name>Jack Huey</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang Team meetings moving to new time slots</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/05/08/lang-team-meetings-rescheduled.html" type="text/html" title="Lang Team meetings moving to new time slots" />
        <published>2020-05-08T00:00:00+00:00</published>
        <updated>2020-05-08T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/05/08/lang-team-meetings-rescheduled.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/05/08/lang-team-meetings-rescheduled.html">&lt;p&gt;The Rust language team holds two weekly meetings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The triage meeting, where we go through open items that need language team
review or guidance.&lt;/li&gt;
&lt;li&gt;The design meeting, where we do in-depth dives and explorations on a specific
proposal, issue, or idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To better accommodate the schedules of lang team members and other regular
attendees, we've rescheduled the time slots for both of these meetings.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The triage meeting now takes place on Mondays from 12-1pm US/Pacific.&lt;/li&gt;
&lt;li&gt;The design meeting now takes place on Wednesdays from 10-11am US/Pacific.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These meetings are open to the public; you can find the details on the lang
team calendar. For more information on how to subscribe to the lang team
calendar, see the README in the &lt;a href=&quot;https://github.com/rust-lang/lang-team&quot;&gt;lang team
repository&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Josh Triplett</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update: Meeting 23 April 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/04/23/Governance-wg.html" type="text/html" title="Governance Working Group Update: Meeting 23 April 2020" />
        <published>2020-04-23T00:00:00+00:00</published>
        <updated>2020-04-23T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/04/23/Governance-wg.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/04/23/Governance-wg.html">&lt;p&gt;Greetings Rustaceans!&lt;/p&gt;
&lt;p&gt;The Rust Governance Working Group held another meeting on Zulip on 23 April.&lt;/p&gt;
&lt;p&gt;The agenda included:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow up on &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2856&quot;&gt;the Project Group RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pre-RFC process&lt;/li&gt;
&lt;li&gt;Domain Working Group Retrospective&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2020.04.23.md&quot;&gt;detailed minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/wg-governance&quot;&gt;wg-governance&lt;/a&gt; repository, but here is a quick summary:&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#follow-up-on-the-project-group-rfc&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;follow-up-on-the-project-group-rfc&quot;&gt;&lt;/a&gt;Follow up on the &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2856&quot;&gt;Project Group RFC&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Is in Final comment Period, on track to be merged by the rfcbot&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href=&quot;#pre-rfc-process&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;pre-rfc-process&quot;&gt;&lt;/a&gt;Pre-RFC process&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;No update at present time&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href=&quot;#domain-working-group-retrospective&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;domain-working-group-retrospective&quot;&gt;&lt;/a&gt;Domain Working Group Retrospective&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;There is lack of contextual clarity about how domain work relates to the Rust project in general&lt;/li&gt;
&lt;li&gt;First step: Created questionnaire to be shared with Domain WG leads via email to gain clarity on this&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next meeting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Our next meeting will be 7 May 2020 via &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/223182-wg-governance&quot;&gt;Zulip&lt;/a&gt; 17:00 UTC.&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Val Grimm</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update: Meeting 09 April 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/04/14/Governance-WG-updated.html" type="text/html" title="Governance Working Group Update: Meeting 09 April 2020" />
        <published>2020-04-14T00:00:00+00:00</published>
        <updated>2020-04-14T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/04/14/Governance-WG-updated.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/04/14/Governance-WG-updated.html">&lt;p&gt;Greetings Rustaceans!&lt;/p&gt;
&lt;p&gt;The Rust Governance Working Group held another meeting on Zulip on 09 April.&lt;/p&gt;
&lt;p&gt;The agenda included:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow up on &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2856&quot;&gt;the Project Group RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pre-RFC process&lt;/li&gt;
&lt;li&gt;Domain Working Group Retrospective&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2020.04.09.md&quot;&gt;detailed minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/wg-governance&quot;&gt;wg-governance&lt;/a&gt; repository, but here is a quick summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow up on the &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2856&quot;&gt;Project Group RFC&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Defined roles of &amp;quot;lead&amp;quot; and &amp;quot;liason&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discussed the initial Pre-RFC process draft&lt;/li&gt;
&lt;li&gt;We ran out of time before getting to the Domain Working Group retrospective, but look forward to covering it at the next meeting!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next meeting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Our next meeting will be 23 April 2020 via &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/223182-wg-governance&quot;&gt;Zulip&lt;/a&gt; 18-19 CET / 1pm-2pm EST / 10-11am PST.&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Nell Shamrell-Harrington</name>
        </author>
    </entry>
    
</feed>
